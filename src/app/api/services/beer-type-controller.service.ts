/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BeerTypeResponse } from '../models/beer-type-response';
import { createBeerType } from '../fn/beer-type-controller/create-beer-type';
import { CreateBeerType$Params } from '../fn/beer-type-controller/create-beer-type';
import { getBeerTypes } from '../fn/beer-type-controller/get-beer-types';
import { GetBeerTypes$Params } from '../fn/beer-type-controller/get-beer-types';
import { PaginatedResponseBeerTypeResponse } from '../models/paginated-response-beer-type-response';
import { updateBeerType } from '../fn/beer-type-controller/update-beer-type';
import { UpdateBeerType$Params } from '../fn/beer-type-controller/update-beer-type';

@Injectable({ providedIn: 'root' })
export class BeerTypeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateBeerType()` */
  static readonly UpdateBeerTypePath = '/beer-types/{beer-type-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBeerType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBeerType$Response(params: UpdateBeerType$Params, context?: HttpContext): Observable<StrictHttpResponse<BeerTypeResponse>> {
    return updateBeerType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBeerType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBeerType(params: UpdateBeerType$Params, context?: HttpContext): Observable<BeerTypeResponse> {
    return this.updateBeerType$Response(params, context).pipe(
      map((r: StrictHttpResponse<BeerTypeResponse>): BeerTypeResponse => r.body)
    );
  }

  /** Path part for operation `getBeerTypes()` */
  static readonly GetBeerTypesPath = '/beer-types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBeerTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeerTypes$Response(params?: GetBeerTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseBeerTypeResponse>> {
    return getBeerTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBeerTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeerTypes(params?: GetBeerTypes$Params, context?: HttpContext): Observable<PaginatedResponseBeerTypeResponse> {
    return this.getBeerTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseBeerTypeResponse>): PaginatedResponseBeerTypeResponse => r.body)
    );
  }

  /** Path part for operation `createBeerType()` */
  static readonly CreateBeerTypePath = '/beer-types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBeerType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBeerType$Response(params: CreateBeerType$Params, context?: HttpContext): Observable<StrictHttpResponse<BeerTypeResponse>> {
    return createBeerType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBeerType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBeerType(params: CreateBeerType$Params, context?: HttpContext): Observable<BeerTypeResponse> {
    return this.createBeerType$Response(params, context).pipe(
      map((r: StrictHttpResponse<BeerTypeResponse>): BeerTypeResponse => r.body)
    );
  }

}
