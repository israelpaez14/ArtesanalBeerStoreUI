/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBeer } from '../fn/beer/add-beer';
import { AddBeer$Params } from '../fn/beer/add-beer';
import { BeerResponse } from '../models/beer-response';
import { getBeer } from '../fn/beer/get-beer';
import { GetBeer$Params } from '../fn/beer/get-beer';
import { getBeerByBeerType } from '../fn/beer/get-beer-by-beer-type';
import { GetBeerByBeerType$Params } from '../fn/beer/get-beer-by-beer-type';
import { getBeers } from '../fn/beer/get-beers';
import { GetBeers$Params } from '../fn/beer/get-beers';
import { PaginatedResponseBeerResponse } from '../models/paginated-response-beer-response';
import { updateBeer } from '../fn/beer/update-beer';
import { UpdateBeer$Params } from '../fn/beer/update-beer';
import { uploadBeerPicture } from '../fn/beer/upload-beer-picture';
import { UploadBeerPicture$Params } from '../fn/beer/upload-beer-picture';


/**
 * Beers related endpoint
 */
@Injectable({ providedIn: 'root' })
export class BeerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getBeer()` */
  static readonly GetBeerPath = '/beers/{beer-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBeer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeer$Response(params: GetBeer$Params, context?: HttpContext): Observable<StrictHttpResponse<BeerResponse>> {
    return getBeer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBeer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeer(params: GetBeer$Params, context?: HttpContext): Observable<BeerResponse> {
    return this.getBeer$Response(params, context).pipe(
      map((r: StrictHttpResponse<BeerResponse>): BeerResponse => r.body)
    );
  }

  /** Path part for operation `updateBeer()` */
  static readonly UpdateBeerPath = '/beers/{beer-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBeer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBeer$Response(params: UpdateBeer$Params, context?: HttpContext): Observable<StrictHttpResponse<BeerResponse>> {
    return updateBeer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBeer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBeer(params: UpdateBeer$Params, context?: HttpContext): Observable<BeerResponse> {
    return this.updateBeer$Response(params, context).pipe(
      map((r: StrictHttpResponse<BeerResponse>): BeerResponse => r.body)
    );
  }

  /** Path part for operation `getBeers()` */
  static readonly GetBeersPath = '/beers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBeers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeers$Response(params?: GetBeers$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseBeerResponse>> {
    return getBeers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBeers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeers(params?: GetBeers$Params, context?: HttpContext): Observable<PaginatedResponseBeerResponse> {
    return this.getBeers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseBeerResponse>): PaginatedResponseBeerResponse => r.body)
    );
  }

  /** Path part for operation `addBeer()` */
  static readonly AddBeerPath = '/beers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBeer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBeer$Response(params: AddBeer$Params, context?: HttpContext): Observable<StrictHttpResponse<BeerResponse>> {
    return addBeer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBeer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBeer(params: AddBeer$Params, context?: HttpContext): Observable<BeerResponse> {
    return this.addBeer$Response(params, context).pipe(
      map((r: StrictHttpResponse<BeerResponse>): BeerResponse => r.body)
    );
  }

  /** Path part for operation `uploadBeerPicture()` */
  static readonly UploadBeerPicturePath = '/beers/{beer-id}/upload-picture';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBeerPicture()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadBeerPicture$Response(params: UploadBeerPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadBeerPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBeerPicture$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadBeerPicture(params: UploadBeerPicture$Params, context?: HttpContext): Observable<void> {
    return this.uploadBeerPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getBeerByBeerType()` */
  static readonly GetBeerByBeerTypePath = '/beers/type/{beer-type}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBeerByBeerType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeerByBeerType$Response(params: GetBeerByBeerType$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseBeerResponse>> {
    return getBeerByBeerType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBeerByBeerType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeerByBeerType(params: GetBeerByBeerType$Params, context?: HttpContext): Observable<PaginatedResponseBeerResponse> {
    return this.getBeerByBeerType$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseBeerResponse>): PaginatedResponseBeerResponse => r.body)
    );
  }

}
